// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Address decoding
    Not(in=address[13], out=midRAM );  
    Not(in=address[14], out=uppRAM );  
    And(a=midRAM, b=uppRAM, out=isRAM );  // address < 0x4000

    Not(in=address[13], out=uppscreen );
    And(a=address[12], b=uppscreen, out=isScreen );  // 0x4000â€“0x5FFF
    And(a=address[12], b=address[13], out=isKeyboard ); // 0x6000

    Or(a=isRAM, b=isScreen, out=anyValidMem );
    Or(a=anyValidMem, b=isKeyboard, out=validAddr );

    // Write enable logic
    And(a=load, b=isRAM, out=writeRAM );
    And(a=load, b=isScreen, out=writeScreen );

    // writing to selected device
    RAM16K(in=in, load=writeRAM, address=address[0..13], out=RAMout );
    Screen(in=in, load=writeScreen, address=address[0..12], out=Screenout );
    Keyboard(out=Keyboardout );

    // Read path logic
    Mux16(a=RAMout, b=Screenout, sel=isScreen, out=temp1 );
    Mux16(a=temp1, b=Keyboardout, sel=isKeyboard, out=temp2 );
    Mux16(a=temp2, b=false, sel=validAddr, out=out );
}